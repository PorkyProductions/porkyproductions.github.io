// node_modules/uadetect/dist/browser.js
var ua = navigator.userAgent;
var getBrowser = ({ ua: ua2 }) => {
  if (ua2.indexOf("Opera") > -1) {
    return "Opera";
  } else if (ua2.indexOf("Chrome") > -1) {
    return "Chrome";
  } else if (ua2.indexOf("Firefox") > -1) {
    return "Firefox";
  } else if (ua2.indexOf("Safari") > -1) {
    return "Safari";
  } else if (ua2.indexOf("MSIE") > -1) {
    return "IE";
  } else if (ua2.indexOf("Trident") > -1) {
    return "IE";
  } else if (ua2.indexOf("Edge") > -1) {
    return "Edge";
  } else {
    return "unknown";
  }
};
var browser = getBrowser({ ua });

// node_modules/uadetect/dist/cookies.js
var cookies = navigator.cookieEnabled;
var getCookies = (cookies2) => {
  if (cookies2 == true) {
    return "COOKIES_enabled";
  }
  ;
  if (cookies2 == false) {
    return "COOKIES_notEnabled";
  } else {
    return "ERROR";
  }
};
var cookieStatus = getCookies(cookies);

// node_modules/uadetect/dist/DetectDeviceType.js
function DetectDeviceType() {
  const ua2 = navigator.userAgent;
  if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(ua2)) {
    return "tablet";
  } else if (/(iPhone|iPod|iPad)/i.test(ua2) || /(android)/i.test(ua2) || /(windows phone)/i.test(ua2) || /(blackberry)/i.test(ua2) || /(bb10)/i.test(ua2) || /(opera mini)/i.test(ua2) || /(opera mobi)/i.test(ua2) || /(iemobile)/i.test(ua2) || /(symbian)/i.test(ua2) || /(maemo)/i.test(ua2) || /(webos)/i.test(ua2) || /(mobile)/i.test(ua2) || /(tablet)/i.test(ua2) || /(symbianos)/i.test(ua2) || /(up.browser)/i.test(ua2) || /(up.link)/i.test(ua2) || /(mmp)/i.test(ua2) || /(symbianos)/i.test(ua2) || /(midp)/i.test(ua2) || /(wap)/i.test(ua2) || /(phone)/i.test(ua2) || /(pocket)/i.test(ua2) || /(mobile)/i.test(ua2) || /(pda)/i.test(ua2) || /(avantgo)/i.test(ua2) || /(eudoraweb)/i.test(ua2) || /(brew)|(bada)/i.test(ua2) || /(blackberry)/i.test(ua2) || /(hpwos)/i.test(ua2) || /(kindle)/i.test(ua2) || /(lge.netcast)/i.test(ua2) || /(lg;lx)|(lg;lx)/i.test(ua2) || /(lge.netcast)/i.test(ua2) || /(nintendo.3ds)/i.test(ua2) || /(nintendo.ds)/i.test(ua2) || /(nintendo.wiiu)/i.test(ua2) || /(nintendo.wii)/i.test(ua2) || /(playstation.3ds)/i.test(ua2) || /(playstation.ds)/i.test(ua2) || /(playstation.wiiu)/i.test(ua2) || /(playstation.wii)/i.test(ua2) || /(webos)/i.test(ua2)) {
    return "mobile";
  } else {
    return "desktop";
  }
}
var DEVICE_type = DetectDeviceType();

// node_modules/uadetect/dist/doNotTrack.js
var browserDoNotTrack = navigator.doNotTrack;
var getDoNotTrack = (browserDoNotTrack2) => {
  if (browserDoNotTrack2 == 0) {
    return "TRACKING_allowed";
  }
  ;
  if (browserDoNotTrack2 == 1) {
    return "TRACKING_notAllowed";
  }
  if (browserDoNotTrack2 == "unspecified") {
    return "TRACKING_unspecified";
  }
  if (browserDoNotTrack2 == "null") {
    return "TRACKING_unspecified";
  } else {
    return "ERROR";
  }
};
var doNotTrackStatus = getDoNotTrack(browserDoNotTrack);

// node_modules/uadetect/dist/finiteMobileDeviceType.js
function finiteMobileDeviceType() {
  const ua2 = navigator.userAgent;
  if (/(iPhone|iPod|iPad)/i.test(ua2)) {
    console.log("iOS");
    return "iOS";
  } else if (/Android/i.test(ua2)) {
    console.log("Android");
    return "Android";
  } else if (/BlackBerry/i.test(ua2)) {
    console.log("BlackBerry");
    return "BlackBerry";
  } else if (/Windows Phone/i.test(ua2)) {
    console.log("Windows Phone");
    return "Windows Phone";
  } else if (/webOS/i.test(ua2)) {
    console.log("webOS");
    return "webOS";
  } else {
    console.log("ERR: Unknown Device");
    return "unknown";
  }
}
var DEVICE_finiteType = finiteMobileDeviceType();

// node_modules/uadetect/dist/logicalProcessors.js
var getProcessors = () => {
  return navigator.hardwareConcurrency;
};
var browserSpecificSupportCores = () => {
  if (browser === "Chrome") {
    return getProcessors();
  }
  ;
  if (browser === "Edge") {
    return getProcessors();
  }
  if (browser === "Firefox") {
    return getProcessors();
  }
  if (browser === "IE") {
    return "Not Supported";
  }
  if (browser === "Opera") {
    return getProcessors();
  }
  if (browser === "Safari") {
    return getProcessors();
  } else {
    return "Not Supported";
  }
};
var processorCores = browserSpecificSupportCores();

// node_modules/uadetect/dist/maxTouchPoints.js
var getMaxTouchPoints = () => {
  return navigator.maxTouchPoints;
};
var maxTouchPoints = getMaxTouchPoints();

// node_modules/uadetect/dist/online.js
var browserIsOnline = navigator.onLine;
var getBrowserIsOnline = ({ browserIsOnline: browserIsOnline2 }) => {
  if (browserIsOnline2) {
    return "BROWSER_online";
  } else {
    return "BROWSER_offline";
  }
};
var browserOnlineStatus = getBrowserIsOnline({ browserIsOnline });

// node_modules/uadetect/dist/getCurrentUA.js
var getCurrentUA = () => {
  return navigator.userAgent;
};
var currentUA = getCurrentUA();

// node_modules/uadetect/dist/operatingSystem.js
var getOS = ({ ua: ua2 }) => {
  if (ua2.indexOf("Windows") > -1) {
    return "Windows";
  } else if (ua2.indexOf("Mac") > -1) {
    return "Mac";
  } else if (ua2.indexOf("Linux") > -1) {
    return "Linux";
  } else if (ua2.indexOf("Android") > -1) {
    return "Android";
  } else if (ua2.indexOf("iPhone") > -1) {
    return "iOS";
  } else if (ua2.indexOf("iPad") > -1) {
    return "iOS";
  } else if (ua2.indexOf("iPod") > -1) {
    return "iOS";
  } else {
    return "unknown";
  }
};
var OS = getOS({ ua: navigator.userAgent });

// node_modules/uadetect/dist/orientation.js
var ORIENTATION_isLandscape = true;
$(document).ready(() => {
  DetectScreenOrientation();
});
$(window).on("orientationchange", (_event) => {
  DetectScreenOrientation();
});
var DetectScreenOrientation = () => {
  ORIENTATION_isLandscape = window.innerHeight <= window.innerWidth;
  return ORIENTATION_isLandscape;
};

// node_modules/uadetect/dist/pdf.js
var pdf = navigator.pdfViewerEnabled;
var getPDF = ({ pdf: pdf2 }) => {
  if (pdf2) {
    return "PDF_viewerEnabled";
  } else {
    return "PDF_viewerDisabled";
  }
};
var PDFviewerStatus = getPDF({ pdf });

// node_modules/uadetect/dist/ram.js
var getRam = () => {
  let RAM = navigator.deviceMemory;
  return RAM;
};
var browserSpecificSupportRAM = (getRam2) => {
  if (browser == "Chrome") {
    getRam2();
  }
  if (browser == "Firefox") {
    return "RAM API not availible in Firefox";
  }
  if (browser == "Safari") {
    return "RAM API not availible in Safari";
  }
  if (browser == "IE") {
    return "RAM API not availible in IE";
  }
  if (browser == "Opera") {
    getRam2();
  }
};
var browserRam = browserSpecificSupportRAM(getRam);

// node_modules/uadetect/dist/webdriver.js
var webdriverControlled = navigator.webdriver;
var getBots = ({ webdriverControlled: webdriverControlled2 }) => {
  if (webdriverControlled2) {
    return "ROBOT_controlled";
  } else {
    return "HUMAN_controlled";
  }
};
var robotStatus = getBots({ webdriverControlled });
export {
  DEVICE_finiteType,
  DEVICE_type,
  DetectDeviceType,
  DetectScreenOrientation,
  ORIENTATION_isLandscape,
  OS,
  PDFviewerStatus,
  browser,
  browserOnlineStatus,
  browserRam,
  browserSpecificSupportCores,
  browserSpecificSupportRAM,
  cookieStatus,
  currentUA,
  doNotTrackStatus,
  finiteMobileDeviceType,
  getBrowser,
  getCookies,
  getCurrentUA,
  getDoNotTrack,
  getMaxTouchPoints,
  getOS,
  getRam,
  maxTouchPoints,
  processorCores,
  robotStatus
};
//# sourceMappingURL=uadetect.js.map
