{
  "version": 3,
  "sources": ["../../uadetect/dist/browser.js", "../../uadetect/dist/cookies.js", "../../uadetect/dist/DetectDeviceType.js", "../../uadetect/dist/doNotTrack.js", "../../uadetect/dist/finiteMobileDeviceType.js", "../../uadetect/dist/logicalProcessors.js", "../../uadetect/dist/maxTouchPoints.js", "../../uadetect/dist/online.js", "../../uadetect/dist/getCurrentUA.js", "../../uadetect/dist/operatingSystem.js", "../../uadetect/dist/orientation.js", "../../uadetect/dist/pdf.js", "../../uadetect/dist/ram.js", "../../uadetect/dist/webdriver.js"],
  "sourcesContent": ["let ua = navigator.userAgent;\r\nconst getBrowser = ({ ua }) => {\r\n    if (ua.indexOf('Opera') > -1) {\r\n        return 'Opera';\r\n    }\r\n    else if (ua.indexOf('Chrome') > -1) {\r\n        return 'Chrome';\r\n    }\r\n    else if (ua.indexOf('Firefox') > -1) {\r\n        return 'Firefox';\r\n    }\r\n    else if (ua.indexOf('Safari') > -1) {\r\n        return 'Safari';\r\n    }\r\n    else if (ua.indexOf('MSIE') > -1) {\r\n        return 'IE';\r\n    }\r\n    else if (ua.indexOf('Trident') > -1) {\r\n        return 'IE';\r\n    }\r\n    else if (ua.indexOf('Edge') > -1) {\r\n        return 'Edge';\r\n    }\r\n    else {\r\n        return 'unknown';\r\n    }\r\n};\r\nlet browser = getBrowser({ ua });\r\nexport { browser, getBrowser };\r\n", "let cookies = navigator.cookieEnabled;\r\nconst getCookies = (cookies) => {\r\n    if (cookies == true) {\r\n        return \"COOKIES_enabled\";\r\n    }\r\n    ;\r\n    if (cookies == false) {\r\n        return \"COOKIES_notEnabled\";\r\n    }\r\n    else {\r\n        return \"ERROR\";\r\n    }\r\n};\r\nlet cookieStatus = getCookies(cookies);\r\nexport { cookieStatus };\r\nexport { getCookies };\r\n", "//DEVICE TYPE\r\nfunction DetectDeviceType() {\r\n    const ua = navigator.userAgent;\r\n    if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(ua)) {\r\n        return \"tablet\";\r\n    }\r\n    else if (/(iPhone|iPod|iPad)/i.test(ua) ||\r\n        /(android)/i.test(ua) ||\r\n        /(windows phone)/i.test(ua) ||\r\n        /(blackberry)/i.test(ua) ||\r\n        /(bb10)/i.test(ua) ||\r\n        /(opera mini)/i.test(ua) ||\r\n        /(opera mobi)/i.test(ua) ||\r\n        /(iemobile)/i.test(ua) ||\r\n        /(symbian)/i.test(ua) ||\r\n        /(maemo)/i.test(ua) ||\r\n        /(webos)/i.test(ua) ||\r\n        /(mobile)/i.test(ua) ||\r\n        /(tablet)/i.test(ua) ||\r\n        /(symbianos)/i.test(ua) ||\r\n        /(up.browser)/i.test(ua) ||\r\n        /(up.link)/i.test(ua) ||\r\n        /(mmp)/i.test(ua) ||\r\n        /(symbianos)/i.test(ua) ||\r\n        /(midp)/i.test(ua) ||\r\n        /(wap)/i.test(ua) ||\r\n        /(phone)/i.test(ua) ||\r\n        /(pocket)/i.test(ua) ||\r\n        /(mobile)/i.test(ua) ||\r\n        /(pda)/i.test(ua) ||\r\n        /(avantgo)/i.test(ua) ||\r\n        /(eudoraweb)/i.test(ua) ||\r\n        /(brew)|(bada)/i.test(ua) ||\r\n        /(blackberry)/i.test(ua) ||\r\n        /(hpwos)/i.test(ua) ||\r\n        /(kindle)/i.test(ua) ||\r\n        /(lge.netcast)/i.test(ua) ||\r\n        /(lg;lx)|(lg;lx)/i.test(ua) ||\r\n        /(lge.netcast)/i.test(ua) ||\r\n        /(nintendo.3ds)/i.test(ua) ||\r\n        /(nintendo.ds)/i.test(ua) ||\r\n        /(nintendo.wiiu)/i.test(ua) ||\r\n        /(nintendo.wii)/i.test(ua) ||\r\n        /(playstation.3ds)/i.test(ua) ||\r\n        /(playstation.ds)/i.test(ua) ||\r\n        /(playstation.wiiu)/i.test(ua) ||\r\n        /(playstation.wii)/i.test(ua) ||\r\n        /(webos)/i.test(ua)) {\r\n        return \"mobile\";\r\n        // add \"| /(firefox)/i.test(ua) |\" if you want to detect Firefox (not tested for mobile)\r\n    }\r\n    else {\r\n        return \"desktop\";\r\n    }\r\n}\r\nlet DEVICE_type = DetectDeviceType();\r\nexport { DEVICE_type, DetectDeviceType };\r\n", "let browserDoNotTrack = navigator.doNotTrack;\r\nconst getDoNotTrack = (browserDoNotTrack) => {\r\n    if (browserDoNotTrack == 0) {\r\n        return \"TRACKING_allowed\";\r\n    }\r\n    ;\r\n    if (browserDoNotTrack == 1) {\r\n        return \"TRACKING_notAllowed\";\r\n    }\r\n    if (browserDoNotTrack == \"unspecified\") {\r\n        return \"TRACKING_unspecified\";\r\n    }\r\n    if (browserDoNotTrack == \"null\") {\r\n        return \"TRACKING_unspecified\";\r\n    }\r\n    else {\r\n        return \"ERROR\";\r\n    }\r\n};\r\nlet doNotTrackStatus = getDoNotTrack(browserDoNotTrack);\r\nexport { doNotTrackStatus, getDoNotTrack };\r\n", "// Finite Device Type\r\nexport default function finiteMobileDeviceType() {\r\n    const ua = navigator.userAgent;\r\n    if (/(iPhone|iPod|iPad)/i.test(ua)) {\r\n        console.log(\"iOS\");\r\n        return \"iOS\";\r\n    }\r\n    else if (/Android/i.test(ua)) {\r\n        console.log(\"Android\");\r\n        return \"Android\";\r\n    }\r\n    else if (/BlackBerry/i.test(ua)) {\r\n        console.log(\"BlackBerry\");\r\n        return \"BlackBerry\";\r\n    }\r\n    else if (/Windows Phone/i.test(ua)) {\r\n        console.log(\"Windows Phone\");\r\n        return \"Windows Phone\";\r\n    }\r\n    else if (/webOS/i.test(ua)) {\r\n        console.log(\"webOS\");\r\n        return \"webOS\";\r\n    }\r\n    else {\r\n        console.log(\"ERR: Unknown Device\");\r\n        return \"unknown\";\r\n    }\r\n}\r\nlet DEVICE_finiteType = finiteMobileDeviceType();\r\nexport { DEVICE_finiteType, finiteMobileDeviceType };\r\n", "import { browser } from \"./browser\";\r\nconst getProcessors = () => {\r\n    return navigator.hardwareConcurrency;\r\n};\r\nconst browserSpecificSupportCores = () => {\r\n    if (browser === \"Chrome\") {\r\n        return getProcessors();\r\n    }\r\n    ;\r\n    if (browser === \"Edge\") {\r\n        return getProcessors();\r\n    }\r\n    if (browser === \"Firefox\") {\r\n        return getProcessors();\r\n    }\r\n    if (browser === \"IE\") {\r\n        return \"Not Supported\";\r\n    }\r\n    if (browser === \"Opera\") {\r\n        return getProcessors();\r\n    }\r\n    if (browser === \"Safari\") {\r\n        return getProcessors();\r\n    }\r\n    else {\r\n        return \"Not Supported\";\r\n    }\r\n};\r\nlet processorCores = browserSpecificSupportCores();\r\nexport { processorCores, browserSpecificSupportCores };\r\n", "const getMaxTouchPoints = () => {\r\n    return navigator.maxTouchPoints;\r\n};\r\nlet maxTouchPoints = getMaxTouchPoints();\r\nexport { maxTouchPoints, getMaxTouchPoints };\r\n", "let browserIsOnline = navigator.onLine;\r\nconst getBrowserIsOnline = ({ browserIsOnline }) => {\r\n    if (browserIsOnline) {\r\n        return \"BROWSER_online\";\r\n    }\r\n    else {\r\n        return \"BROWSER_offline\";\r\n    }\r\n};\r\nlet browserOnlineStatus = getBrowserIsOnline({ browserIsOnline });\r\nexport { browserOnlineStatus };\r\n", "let getCurrentUA = () => {\r\n    return navigator.userAgent;\r\n};\r\nlet currentUA = getCurrentUA();\r\nexport { currentUA, getCurrentUA };\r\n", "const getOS = ({ ua }) => {\r\n    if (ua.indexOf('Windows') > -1) {\r\n        return 'Windows';\r\n    }\r\n    else if (ua.indexOf('Mac') > -1) {\r\n        return 'Mac';\r\n    }\r\n    else if (ua.indexOf('Linux') > -1) {\r\n        return 'Linux';\r\n    }\r\n    else if (ua.indexOf('Android') > -1) {\r\n        return 'Android';\r\n    }\r\n    else if (ua.indexOf('iPhone') > -1) {\r\n        return 'iOS';\r\n    }\r\n    else if (ua.indexOf('iPad') > -1) {\r\n        return 'iOS';\r\n    }\r\n    else if (ua.indexOf('iPod') > -1) {\r\n        return 'iOS';\r\n    }\r\n    else {\r\n        return 'unknown';\r\n    }\r\n};\r\nlet OS = getOS({ ua: navigator.userAgent });\r\nexport { OS, getOS };\r\n", "/*\r\n\r\nCopyright \uFFFD 2022, PorkyProductions, and it's contributors.\r\nLicensed under the Apache-2.0 License.\r\n\r\n*/\r\n//SCREEN ORIENTATION\r\nlet ORIENTATION_isLandscape = true;\r\n$(document).ready(() => {\r\n    DetectScreenOrientation();\r\n});\r\n$(window).on(\"orientationchange\", (_event) => {\r\n    //When screen orientation changes\r\n    DetectScreenOrientation();\r\n});\r\nconst DetectScreenOrientation = () => {\r\n    //detects orientation of device\r\n    ORIENTATION_isLandscape = window.innerHeight <= window.innerWidth;\r\n    return ORIENTATION_isLandscape;\r\n};\r\n// Exports\r\nexport { DetectScreenOrientation, ORIENTATION_isLandscape };\r\n", "let pdf = navigator.pdfViewerEnabled;\r\nconst getPDF = ({ pdf }) => {\r\n    if (pdf) {\r\n        return \"PDF_viewerEnabled\";\r\n    }\r\n    else {\r\n        return \"PDF_viewerDisabled\";\r\n    }\r\n};\r\nlet PDFviewerStatus = getPDF({ pdf });\r\nexport { PDFviewerStatus };\r\n", "import { browser } from \"./browser\";\r\nconst getRam = () => {\r\n    let RAM = navigator.deviceMemory;\r\n    return RAM;\r\n};\r\nconst browserSpecificSupportRAM = (getRam) => {\r\n    if (browser == \"Chrome\") {\r\n        getRam();\r\n    }\r\n    if (browser == \"Firefox\") {\r\n        return \"RAM API not availible in Firefox\";\r\n    }\r\n    if (browser == \"Safari\") {\r\n        return \"RAM API not availible in Safari\";\r\n    }\r\n    if (browser == \"IE\") {\r\n        return \"RAM API not availible in IE\";\r\n    }\r\n    if (browser == \"Opera\") {\r\n        getRam();\r\n    }\r\n};\r\nlet browserRam = browserSpecificSupportRAM(getRam);\r\nexport { browserRam, getRam, browserSpecificSupportRAM };\r\n", "let webdriverControlled = navigator.webdriver;\r\nconst getBots = ({ webdriverControlled }) => {\r\n    if (webdriverControlled) {\r\n        return \"ROBOT_controlled\";\r\n    }\r\n    else {\r\n        return \"HUMAN_controlled\";\r\n    }\r\n};\r\nlet robotStatus = getBots({ webdriverControlled });\r\nexport { robotStatus };\r\n"],
  "mappings": "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",
  "names": []
}
